<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use App\Models\Habito;

class HabitoController extends Controller
{
    /**
     * Lista todos os h√°bitos
     */
    public function index()
    {
        $habitos = auth()->user()->habitosAtivos;
        $habitosArquivados = auth()->user()->habitos()->where('ativo', false)->get();
        
        return view('habitos.index', compact('habitos', 'habitosArquivados'));
    }

    /**
     * Formul√°rio de cria√ß√£o
     */
    public function create()
    {
        $emojis = $this->getEmojisSugeridos();
        $unidades = $this->getUnidades();
        
        return view('habitos.create', compact('emojis', 'unidades'));
    }

    /**
     * Salva novo h√°bito
     */
    public function store(Request $request)
    {
        $validated = $request->validate([
            'nome' => 'required|string|max:255',
            'tipo' => 'required|in:bom,ruim',
            'emoji' => 'required|string|max:10',
            'meta' => 'required|numeric|min:0',
            'unidade' => 'required|string|max:50',
            'descricao' => 'nullable|string|max:500',
            'frequencia_tipo' => 'required|in:diaria,semanal,mensal,dias_especificos,intervalo_dias',
            'frequencia_config' => 'nullable|array',
        ]);

        $validated['usuario_id'] = auth()->id();
        $validated['ordem'] = Habito::where('usuario_id', auth()->id())->max('ordem') + 1;

        Habito::create($validated);

        return redirect()->route('habitos.index')
            ->with('success', 'H√°bito criado com sucesso! üéâ');
    }

    /**
     * Formul√°rio de edi√ß√£o
     */
    public function edit(Habito $habito)
    {
        // Verifica se √© do usu√°rio
        if ($habito->usuario_id !== auth()->id()) {
            abort(403);
        }

        $emojis = $this->getEmojisSugeridos();
        $unidades = $this->getUnidades();
        
        return view('habitos.edit', compact('habito', 'emojis', 'unidades'));
    }

    /**
     * Atualiza h√°bito
     */
    public function update(Request $request, Habito $habito)
    {
        // Verifica se √© do usu√°rio
        if ($habito->usuario_id !== auth()->id()) {
            abort(403);
        }

        $validated = $request->validate([
            'nome' => 'required|string|max:255',
            'tipo' => 'required|in:bom,ruim',
            'emoji' => 'required|string|max:10',
            'meta' => 'required|numeric|min:0',
            'unidade' => 'required|string|max:50',
            'descricao' => 'nullable|string|max:500',
            'frequencia_tipo' => 'required|in:diaria,semanal,mensal,dias_especificos,intervalo_dias',
            'frequencia_config' => 'nullable|array',
        ]);

        $habito->update($validated);

        return redirect()->route('habitos.index')
            ->with('success', 'H√°bito atualizado com sucesso! ‚ú®');
    }

    /**
     * Arquiva/desativa h√°bito
     */
    public function arquivar(Habito $habito)
    {
        // Verifica se √© do usu√°rio
        if ($habito->usuario_id !== auth()->id()) {
            abort(403);
        }

        $habito->update(['ativo' => false]);

        return redirect()->route('habitos.index')
            ->with('success', 'H√°bito arquivado com sucesso!');
    }

    /**
     * Reativa h√°bito
     */
    public function reativar(Habito $habito)
    {
        // Verifica se √© do usu√°rio
        if ($habito->usuario_id !== auth()->id()) {
            abort(403);
        }

        $habito->update(['ativo' => true]);

        return redirect()->route('habitos.index')
            ->with('success', 'H√°bito reativado com sucesso! üéâ');
    }

    /**
     * Exclui h√°bito (s√≥ se n√£o tiver registros)
     */
    public function destroy(Habito $habito)
    {
        // Verifica se √© do usu√°rio
        if ($habito->usuario_id !== auth()->id()) {
            abort(403);
        }

        // Verifica se pode excluir
        if ($habito->temRegistros()) {
            return redirect()->route('habitos.index')
                ->with('error', 'N√£o √© poss√≠vel excluir um h√°bito que j√° tem registros. Voc√™ pode apenas arquiv√°-lo.');
        }

        $habito->delete();

        return redirect()->route('habitos.index')
            ->with('success', 'H√°bito exclu√≠do com sucesso!');
    }

    /**
     * Atualiza ordem dos h√°bitos
     */
    public function reordenar(Request $request)
    {
        $ordens = $request->input('ordens', []);
        
        foreach ($ordens as $id => $ordem) {
            Habito::where('id', $id)
                ->where('usuario_id', auth()->id())
                ->update(['ordem' => $ordem]);
        }

        return response()->json(['success' => true]);
    }

    /**
     * Emojis sugeridos
     */
    private function getEmojisSugeridos()
    {
        return [
            'Sa√∫de' => ['üíß', 'üèÉ', 'üßò', 'üò¥', 'üíä', 'ü¶∑', 'üß¥'],
            'Exerc√≠cio' => ['üí™', 'üèãÔ∏è', 'üö¥', 'üèä', '‚öΩ', 'üèÉ‚Äç‚ôÄÔ∏è', 'ü§∏'],
            'Alimenta√ß√£o' => ['üçé', 'ü•ó', 'ü•§', 'üçΩÔ∏è', 'ü•ë', 'ü•ï', 'ü´ê'],
            'Produtividade' => ['üìö', '‚úçÔ∏è', 'üíª', 'üìù', 'üéØ', '‚è∞', 'üìä'],
            'Lazer' => ['üéÆ', 'üì∫', 'üéµ', 'üé®', 'üé¨', 'üé™', 'üé≤'],
            'Social' => ['üë•', 'üí¨', 'üì±', '‚òéÔ∏è', '‚úâÔ∏è', 'ü§ù', 'üíë'],
            'V√≠cios' => ['üö¨', 'üç∫', '‚òï', 'üç∑', 'üé∞', 'üì±', 'üç´'],
            'Outros' => ['üéØ', '‚ú®', '‚≠ê', 'üî•', 'üíé', 'üèÜ', 'üéÅ'],
        ];
    }

    /**
     * Unidades dispon√≠veis
     */
    private function getUnidades()
    {
        return [
            'Quantidade' => ['unidades', 'vezes', 'por√ß√µes'],
            'Volume' => ['litros', 'ml', 'copos'],
            'Tempo' => ['minutos', 'horas'],
            'Dist√¢ncia' => ['km', 'metros', 'passos'],
            'Peso' => ['kg', 'gramas'],
            'Outros' => ['p√°ginas', 'calorias', 'repeti√ß√µes'],
        ];
    }
}

